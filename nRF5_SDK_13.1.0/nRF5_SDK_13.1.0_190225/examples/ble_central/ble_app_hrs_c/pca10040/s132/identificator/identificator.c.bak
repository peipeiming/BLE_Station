#include "boards.h"
#include "stdio.h"
#include "string.h"
#include "mytime.h"
#include "ble_dfu.h"
#include "strdeal.h"
#include "ble_hci.h"
#include "app_adv.h"
#include "mble_dfu.h"
#include "core_cm4.h"
#include "app_uart.h"
#include "nrf_delay.h"
#include "app_rtc.h"
#include "identificator.h"
#include "ble_advertising.h"

uint32_t link_time=0;

devmac identificator_id;
uint16_t packet_data_len;


volatile bool do_connect=false;
volatile bool connect_flag=false;

app_messend nrf_messend;

extern void scan_start(void);

ble_bas_c_t                  m_ble_bas_c;                  /**< Structure used to identify the Battery Service client module. */
ble_rscs_c_t                 m_ble_rscs_c;                 /**< Structure used to identify the Runnign Speed and Cadence client module. */

uint16_t                     m_conn_handle;                /**< Current connection handle. */
uint16_t              			 m_pending_db_disc_conn=BLE_CONN_HANDLE_INVALID;

/**@brief Names which the central applications will scan for, and which will be advertised by the peripherals.
 *  if these are set to empty strings, the UUIDs defined below will be used
 */

const char m_target_periph_name[] = "SS";     /**< If you want to connect to a peripheral using a given advertising name, type its name here. */
volatile bool  is_connect_per_addr = false;                /**< If you want to connect to a peripheral with a given address, set this to true and put the correct address in the variable below. */
ble_gap_addr_t m_target_periph_addr =
{
    /* Possible values for addr_type:
       BLE_GAP_ADDR_TYPE_PUBLIC,
       BLE_GAP_ADDR_TYPE_RANDOM_STATIC,
       BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE,
       BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE. */
      .addr_type = BLE_GAP_ADDR_TYPE_RANDOM_STATIC,
 	    .addr      = {0x1B,0x00,0x00,0x1F,0x31,0xEF}
};

/*
*********************************************************************************************************
 * 函数名：Gap_Listening
 * 描述  ：打开设备器监听广播功能
 * 输入  ：*p,信息机发出包含打开目标识别器的识别器ID
 * 返回  : 无
 * 协议格式：Head(1Byte)+Protocol ID(1Byte)+Data len(2Byte)+
 * identificator ID(8Byte)+Calibration value(1Byte)+Tail(1Byte)
**********************************************************************************************************
 */
void static app_ble_diconnect(uint8_t *p)
{
	uint8_t i;	

	for(i=0;i<8;i++)
	{
		if(p[4+i]!=identificator_id.mac_8Byte[i])
		{
			return;
		}
	}
  
	is_connect_per_addr=false;
	
	for(i=0;i<14;i++)
	{
		app_uart_put(p[i]);
	}	
	
	sd_ble_gap_disconnect( m_pending_db_disc_conn , BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
}

/*
*********************************************************************************************************
 * 函数名：Link_target_bracelet
 * 描述  ：连接目标手环
 * 输入  ：*p,信息机发出包含连接目标手环的MAC地址
 * 返回  : 无
 * 协议格式：Head(1Byte)+Protocol ID(1Byte)+Data len(2Byte)+
 * identificator ID(8Byte)+The bracelet MAC(6Byte) + Calibration value(1Byte)+Tail(1Byte)
**********************************************************************************************************
 */
void static app_ble_connectbracelet(uint8_t *p)
{
	uint8_t i;
		
	for(i=0;i<8;i++)
	{
		if(p[4+i]!=identificator_id.mac_8Byte[i])
		{
			return;
		}
  }
	
	sd_ble_gap_disconnect( m_pending_db_disc_conn , BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
	
	link_time=0;               /*开始计时连接时间*/
	is_connect_per_addr=true;
	memcpy(m_target_periph_addr.addr,&p[12],6);

}

/*断开蓝牙连接*/
void disconnect_ble_link(void)
{
	uint32_t err_code;	
	
	if(m_pending_db_disc_conn == BLE_CONN_HANDLE_INVALID)
	{
		return;
	}	
	
	if(advsatrt==1) /*关闭广播*/
	{
		bsp_board_led_off(BSP_BOARD_LED_2);
		sd_ble_gap_adv_stop();
		advsatrt=0;
	}	
 
	nrf_delay_ms(2000);
	err_code = sd_ble_gap_disconnect( m_pending_db_disc_conn , BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
	#if 0
	if(err_code != NRF_SUCCESS)
	{
		printf("disconnect err_code:%d\r\n",err_code);
		nrf_delay_ms(1000);
	}
	#endif
	//APP_ERROR_CHECK(err_code);
	nrf_delay_ms(100);
}

/*
*********************************************************************************************************
 * 函数名：gap_info_save
 * 描述  ：广播包数据进行FIFO保存
 * 输入  ：*m_gap_evt_t,广播信息结构体
 * 返回  : 无
 * 协议格式：Head(1Byte)+Protocol ID(1Byte)+Data len(2Byte)+identificator ID(8Byte)+
 * 手环MAC(6Byte)+手环RSSI(1Byte)+ + 手环广播数据(4Byte)+校验(1Byte)+Tail(1Byte)  合计：25Byte
**********************************************************************************************************
 */
void gap_info_save(ble_gap_evt_t const *m_gap_evt_t)               //已测试
{
	uint32_t i;
	uint8_t j,check_results;
	uint8_t gap_info[35];
	
	memset(&gap_info, 0 , sizeof (gap_info));                        //清空数据
		
	gap_info[0]=0x5A;                                                //起始位
	gap_info[1]=ADVDATATGET;                                         //CMD指令类型
  gap_info[2]=0x00;                                     
	gap_info[3]=29;                                                  //数据位长度

	memcpy(&gap_info[4],identificator_id.mac_8Byte,8);
	memcpy(&gap_info[12],m_gap_evt_t->params.adv_report.peer_addr.addr,6);
	
	gap_info[18]=-m_gap_evt_t->params.adv_report.rssi;                 //RSSI值写入

	for(i=0;i<m_gap_evt_t->params.adv_report.dlen;i++)                 //广播包数据  
  {	
	  if(0xFF==m_gap_evt_t->params.adv_report.data[i])
	  {
		  for(j=0;j<14;j++)
		  {
			  gap_info[19+j]=m_gap_evt_t->params.adv_report.data[i+9+j];
		  }
		  break;
	  }
	}
	
  check_results=gap_info[1];
	for(i=2;i<(gap_info[3]+2+3-1);i++)     						                 //CMD字段到数据字段进行校验
		check_results^=gap_info[i];
  gap_info[i]=check_results;                                         //校验值
	gap_info[i+1]=0xca;                                                //结束符
	
	app_adv_WriteFifoData(gap_info,35);
}

/*
*********************************************************************************************************
 * 函数名：app_ble_messagesend
 * 描述  ：向手环发送信息
 * 输入  ：*p,信息机发出包含连接目标手环的MAC地址和信息
 * 返回  : 无
 * 协议格式：Head(1Byte)+Protocol ID(1Byte)+Data len(2Byte)+
 * identificator ID(8Byte)+消息(NByte) + Calibration value(1Byte)+Tail(1Byte)
**********************************************************************************************************
 */
void static app_ble_messagesend(uint8_t *p)
{
	uint16_t i;
	uint32_t err;

	char switchtable[10]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
	char message[p[2]*256+p[3]-13+1];
  
	if(!connect_flag)
	{
		return;   /*未连接状态返回*/
	}
	
	for(i=0;i<8;i++)
	{
		if(p[4+i]!=identificator_id.mac_8Byte[i])
		{
			return;
		}
	}
	
	switchtable[3]=0x01;
	err=ble_rscs_string_send(&m_ble_rscs_c,switchtable,m_ble_rscs_c.message_push_switch_handle);     //使能消息接收   
	if(err!=NRF_SUCCESS)
	{
//		  printf("message string send error:%d\r\n",err);
		return;
	}
	
	nrf_messend.txcount=0;	
	nrf_messend.txstartflag=1;
	nrf_messend.txcompleteflag=1;
	nrf_messend.txlen=p[2]*256+p[3]-8;   								   /*消息长度*/
  memcpy(nrf_messend.txfifo,&p[12],nrf_messend.txlen); /*拷贝消息*/ 
	nrf_messend.txtotalcount=nrf_messend.txlen/17;
	if(nrf_messend.txlen%17!=0)
	{
		nrf_messend.txtotalcount++;
	}
}							

/*
*********************************************************************************************************
 * 函数名：Set_identificator_id
 * 描述  ：设置识别器ID
 * 输入  ：*p,识别器ID
 * 返回  : 无
 * 协议格式：Head(1Byte)+Protocol ID(1Byte)+Data len(2Byte)+
 * identificator ID(8Byte)+Calibration value(1Byte)+Tail(1Byte)
**********************************************************************************************************
 */
void static app_ble_setid(uint8_t *p)
{
	uint8_t i;
	
	for(i=0;i<8;i++)
	{	
		identificator_id.mac_8Byte[i]=p[i];
	}
	
  setid_flag=1;  /*设置设置识别器ID的标志，用于在主循环中进行FDS操作，串口事件中进行FDS操作会导致异常*/
}


/*
*********************************************************************************************************
 * 函数名：Set_time
 * 描述  ：设置蓝牙路由器RTC时钟
 * 输入  ：*p,时间参数
 * 返回  : 无
 * 协议格式：Head(1Byte)+Protocol ID(1Byte)+Data len(2Byte)+
 * year(1Byte)+month(1Byte)+day(1Byte)+hour(1Byte)+minu(1Byte)+sec(1Byte)+Calibration value(1Byte)+Tail(1Byte)
**********************************************************************************************************
 */
void static app_ble_settime(uint8_t *p)
{
	uint16_t year;
	
	year=p[4];
	year+=2000;
  RTC_Set(year,p[5],p[6],p[7],p[8],p[9]);    /*设置RTC时间*/

}

/***************************************************
函数名：uart_data_deal
描述：串口数据处理
参数：
     *p：数据缓存指针
返回：
		 无
***************************************************/
void uart_data_deal(uint8_t *buff,uint16_t buff_len)
{
	uint8_t i;
	uint8_t *p=buff;

	uint16_t validity_data_len;
	uint8_t  check_results;
	
	#if 1                                              //改进后写法
	while(i<buff_len)
  {
		//越过没找到“Z"字符串之前的'\0'
		if((buff[i]=='\0')&&(NULL==strstr ( (const char*)p, "Z" )))  
		  p=&buff[i+1];
		i++;
	}		
  
	buff[i]='\0';
	p=(uint8_t *)strstr((const char*)p,"Z"); 
	if(NULL==p) 	return; 
	#endif
	
	validity_data_len=p[2]*256+p[3];                   //有效数据长度
  
	if((validity_data_len!=                            //软件规避数据越界检查  当数据包中描述有效数据长度与计算得有效数据
	buff_len-6-(p-buff)))     //长度不一致产生错误（偶现bug规避）产生该bug程序卡死
	{
		//printf("validity data len error!\r\n");
		return;
	}
	
	check_results=p[1];
	for(i=2;(i<validity_data_len+2+2);i++)     					//CMD字段到数据字段进行校验 第一个2：表示偏移 第二个2：固定字符长度
		check_results^=p[i];
	if(check_results!=p[4+validity_data_len])           //校验
	{
		//printf("data check error!\r\n");
		return;
	}
	
	packet_data_len=validity_data_len+6;	              //数据包长度
	
	#if 0
	printf("Packet Data len:%d\r\n",packet_data_len);
	printf("Packet Data is:");
  for(i=0;i<packet_data_len;i++)	
		printf("%x ",p[i]);  
	printf("\r\n");
	#endif
	
	switch(p[1])
	{
		case GAPLISTENING:
			app_ble_diconnect(p);     		  //断开连接
			break;
		
		case ADVDATATGET:
			app_adv_datasend(p);            //获取广播包数据
			break;
		
		case CHANGE_TARGET:
			app_ble_connectbracelet(p);     //改变连接目标
			break;

		case SEND_MESSAGE:
			app_ble_messagesend(p);         //发送消息        	   
	    break;
		
	  case SET_TIME:		                //校准基站时间
			app_ble_settime(p);
			break;
				
		default:break;
	}
}




